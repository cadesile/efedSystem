<?php

efed_base();

define('EFED_SHOW_ADMIN_TITLE','Shows');
define('EFED_SHOW_TITLE','Shows');

function efed_show_init() {
	drupal_add_css(drupal_get_path('module','efed_show').'/jcarousel_skins/show_scroller/skin.css');
	drupal_add_css(drupal_get_path('module','efed_show').'/efed_show.css');
	drupal_add_js(drupal_get_path('module','efed_show').'/efed_show.js');
}

function efed_show_perm() {
  return array('administer efed show');
}

function efed_show_menu() {
		
	/*
	 * Adminstration menu callbacks
	 */
	  
	$items[EFED_ADMIN_AREA .'/shows'] = array(
    	'title' => EFED_SHOW_ADMIN_TITLE,
    	'page callback' => 'efed_show_admin_view_all',
    	'access arguments' => array('administer efed show'),
  	);   
	
	$items[EFED_ADMIN_AREA .'/show/store'] = array(
    	'title' => EFED_SHOW_ADMIN_TITLE . ' Create',
	    'page callback'    => 'drupal_get_form',
	    'page arguments'   => array('efed_show_admin_create_form'),
    	'access arguments' => array('administer efed show'),
		'type' => MENU_CALLBACK,
  	);  
		
	/*
	 * User callback menu callbacks
	 * EFED_DEFAULT_ROLE user can access
	 */
	 
	$items['shows'] = array(
    	'title' => EFED_SHOW_TITLE,
    	'page callback' => 'efed_show_view_all',
    	'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
  	);	
	
	return $items;	
}

function efed_show_node_info() {
  return array(
    'efed_show' => array(
	    'name' => t('E-Fed Show'),
	    'module' => 'efed_show',
	    'description' => t('Roster show, assigned by site administrator.'),
	    'has_title' => TRUE,
	    'title_label' => t('Title'),
	    'has_body' => TRUE,
	    'body_label' => t('Content'),
	    'min_word_count' => 0,
	    'locked' => TRUE
    )
  );
}

function efed_show_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
	if($node->type=='efed_show'){
		switch ($op) {
			case 'load':
					$node->show_info = efed_show_load_by_nid($node->nid);
					$node->show_cards = efed_show_load_cards($node->show_info->show_id);
			  break;
			case 'prepare':
				drupal_goto('admin/efed/show/store/'.$node->show_info->show_id);
			  break;
			case 'delete':
				efed_show_delete_by_nid($node->nid);
			  break;
		}
	}
}

function efed_show_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
		'info' => t(' Shows')
	);
    $blocks[1] = array(
		'info' => t(' Shows Scrollable')
	);
    return $blocks;
  }  
  else if ($op == 'configure') {
    switch($delta) {
		case 1:
		$op = array();
		$shows = efed_show_load_all();
		
		foreach($shows as $show){
			$op[$show->nid] = $show->title;
		}
	  
		$form['efed_show_scroller_shows'] = array(
		  '#type' => 'checkboxes',
		  '#title' => t('Shows'),
		  '#description' => t('Select the shows you want to appear in the scrollable block.'),
		  '#default_value' => variable_get('efed_show_scroller_shows', array()),
		  '#options' => $op,
		);
        break;
    }
    return $form;
  }
  else if ($op == 'save') {
    switch($delta) {
		case 1:
			variable_set('efed_show_scroller_shows', $edit['efed_show_scroller_shows']);
        break;
    }
  }
  else if ($op == 'view') {
    switch($delta) {
      case 0:
        $block = array(
          'content' => efed_show_block_0(variable_get('efed_show_next_shows_block_amount', 5)));
        break;
      case 1:
        $block = array(
          'content' => efed_show_block_1());
        break;
    }
    return $block;
  }
}

function efed_show_block_0($amount){	
	$items = array();
	
	$sql = "SELECT node.nid
			FROM efed_show
			LEFT JOIN node
			ON node.nid=efed_show.nid
			ORDER BY node.changed DESC
			LIMIT 0, 5".$amount;	
			
	$result = db_query($sql,$roleplay_id);		
	
	while($data = db_fetch_object($result)){
		$node = node_load($data->nid);
		$items[] .= l($node->title,'node/'.$node->nid);
	}
	
	return theme('item_list',$items);
}

function efed_show_block_1(){	
	$items = array();
	$nodes = variable_get('efed_show_scroller_shows', array());
	
	foreach($nodes as $nid){
		if($nid){
			$node = node_load($nid);
			$items[] = $node;
		}
	}
	
	return theme('efed_show_scrollable',$items);
}

function efed_show_theme() {
  return array(
    'efed_show' => array(
      'arguments' => array('show' => NULL),
      'template' => 'show'
    ),
    'efed_show_item' => array(
      'arguments' => array('show' => NULL),
      'template' => 'show_item'
    ),
	'efed_show_scrollable' => array(
		'arguments' => array('nodes' => NULL),
		'template' => 'show_scrollable'
	),
  );
}

function efed_show_view_all(){
	$limit = 20;
	
	$results = pager_query("SELECT show_id FROM {efed_show}",$limit);
	
	while($data = db_fetch_object($results)){
		$show = efed_show_load($data->show_id);			
		$output .= theme('efed_show_item',$show);
	}	

	$output .= theme('pager', NULL, $limit, 0);
	
	return $output;
}

function efed_show_view_show($show){

	$output .= '<div class="Show">';
	$output .= theme('imagecache','efed_show_banner',$show->banner,$show->title);
	$output .= '<div class="Title">' . l($show->title,'node/'.$show->nid) . '</div>';	
	$output .= '<div class="Body">' . l($show->description,'node/'.$show->nid) . '</div>';
	$output .= '</div>';
	$output .= '<div style="clear:both"></div>';
	
	return $output;
}

function efed_show_admin_view_all(){	
	$limit = 10;
	
	$header = array(
		array('data' => t('Name')),
		array('data' => t('Type')),
		array('data' => t('Available Roster(s)')),
		array('data' => ''),
	);

	$rosters = array();
	$results = pager_query("SELECT show_id FROM {efed_show}",$limit);
	while($data = db_fetch_object($results)){
		$show = efed_show_load($data->show_id);		
				
		$rosters = '';
		
		$o = TRUE;
		
		foreach($show->rosters as $roster){
			if($o){
				$rosters .= $roster;
				$o = FALSE;
			}else{
				$rosters .= ', '.$roster;
			}
		}
				
		$rows[] = array(
			array('data' => $show->title),
			array('data' => $show->type_term->name),
			array('data' => $rosters),
			array('data' => l('Edit',EFED_ADMIN_AREA . '/show/store/' . $show->show_id)),
		);
	}	
	
	$output .= theme('table', $header, $rows);
	$output .= theme('pager', NULL, $limit, 0);
	
	$output .= l('Create Show',EFED_ADMIN_AREA . '/show/store');
	
	return $output;
}

function efed_show_admin_create_form($form_state){
	$form = array();
	
	$form['#attributes'] = array(
		'enctype' => "multipart/form-data"
	);
	
	$show = efed_show_load(arg(4));	
	$exists = ($show->show_id)? TRUE : FALSE;	
	$rosters = efed_roster_load_all();
		
	foreach($rosters as $roster){
		$options[$roster->roster_id] = $roster->name;
	}
		
	$form['info'] = array(
		'#type' => 'fieldset',
		'#title' => t('Show Details'),
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
	);	
	
	$form['info']['show_id'] = array(
	  	'#type' => 'hidden',
		'#value' => $show->show_id,
	);
	
	$form['info']['nid'] = array(
	  	'#type' => 'hidden',
		'#value' => $show->nid,
	);
	
	$form['info']['title'] = array(
	  	'#type' => 'textfield',
		'#default_value' => $show->title,
		'#size' => 60,
		'#maxlength' => 128,
  		'#required' => TRUE,
	  	'#title' => t('Title'),
	);
	
	$form['info']['type'] = array(
	  	'#type' => 'select',
		'#default_value' => $show->type,
		'#options' => efed_base_load_category(variable_get('show_type',0)),
  		'#required' => TRUE,
	  	'#title' => t('Type'),
	);
	
	$form['info']['description'] = array(
	  	'#type' => 'textarea',
		'#default_value' => $show->description,
  		'#required' => TRUE,
	  	'#title' => t('Description'),
	);
	
	$selected = array();
	
	foreach($show->rosters as $key => $value){
		$selected[] = $key;
	}
	
	$form['info']['rosters'] = array(
	  	'#type' => 'checkboxes',
		'#default_value' => $selected,
		'#options'=>$options,
	  	'#title' => t('Roster(s)'),
  		'#required' => TRUE,
		'#description'=>t('The roster(s) selected will determine the wrestlers available when a card is created for a show.'),
	);
	
	$form['info']['banner_new'] = array(
	  	'#type' => 'file',
		'#size' => 30,
	  	'#title' => t('Main Banner'),
		'#description' => $show->banner,
	);
	
	$form['info']['banner'] = array(
	  	'#type' => 'hidden',
		'#value' => $show->banner,
	);
	
	$form['info']['thumbnail_new'] = array(
	  	'#type' => 'file',
		'#size' => 30,
	  	'#title' => t('Thumbnail'),
		'#description' => $show->thumbnail,
	);
	
	$form['info']['thumbnail'] = array(
	  	'#type' => 'hidden',
		'#value' => $show->thumbnail,
	);
		
	$form['store'] = array(
		'#type' => 'submit', 
		'#value' => t('Store')
	);
		
	$form['cancel'] = array(
		'#type' => 'submit', 
		'#value' => t('Cancel')
	);
	
	if($exists){		
		$form['delete'] = array(
			'#type' => 'submit', 
			'#value' => t('Delete')
		);
	}
				
	return $form;
}

function efed_show_admin_create_form_submit($form, &$form_state){	
	$show = (object)$form_state['values'];
	
	$rosters = array();
	
	foreach($show->rosters as $key => $value){
		if($value) $rosters[] = $key;
	}
	
	if($_FILES['files']['name']['banner_new']!=''){
		$banner = file_save_upload('banner_new',NULL,file_directory_path());	
		$show->banner = $banner->filepath;
	}
	if($_FILES['files']['name']['thumbnail_new']!=''){
		$thumbnail = file_save_upload('thumbnail_new',NULL,file_directory_path());	
		$show->thumbnail = $thumbnail->filepath;
	}
	
	$show->rosters = $rosters;

	switch($show->op){
		case 'Store':
				efed_show_store($show);
	
				if($show->show_id){
					drupal_set_message('Show <em>'. $show->title.'</em> details stored.','status');		
					drupal_goto('admin/efed/show/store/'.$show->show_id);
				}else{
					drupal_set_message('Show <em>'. $show->title.'</em> details could not be stored.','error');
				}
			break;
		case 'Cancel':
				drupal_goto('admin/efed/shows');
			break;	
		case 'Delete':
				efed_show_delete($show->show_id);
				drupal_goto('admin/efed/shows');
			break;		
	}
}


/*
 * 
 * BASE STORE(CREATE/UPDATE), READ & DELETE FUNCTION,  * 
 * 
 */

function efed_show_load_cards($show_id){		
	$cards = array();
	$results = db_query("SELECT card_id FROM {efed_card} WHERE show_id = %d",$show_id);
	while($data = db_fetch_object($results)) $cards[] = efed_card_load($data->card_id);
	return $cards;
}

function efed_show_load_all(){		
	$shows = array();
	$sql = "SELECT show_id FROM {efed_show}";	
	$result = db_query($sql);		
	while($data = db_fetch_object($result)){
		$shows[] = efed_show_load($data->show_id);
	}
	return $shows;
}

function efed_show_load_by_nid($nid){		
	$sql = "SELECT show_id FROM {efed_show} WHERE nid = %d";	
	$result = db_query($sql,$nid);		
	$data = db_fetch_object($result);	
	return efed_show_load($data->show_id);
}

function efed_show_load($show_id){	
	
	$sql = "SELECT * FROM {efed_show} WHERE show_id = %d";	
	$result = db_query($sql,$show_id);		
	$data = db_fetch_object($result);
	$data->rosters = efed_show_load_roster($show_id);
	
	$data->next_card = efed_card_load_next_by_show_id($show_id);
	
	$belts = array();
	
	foreach($data->rosters as $roster_id => $roster_name){
		$roster = efed_roster_load($roster_id);
	
		foreach($roster->belts as $belt){
			$belts[$belt->belt_id] = $belt->name;
		}
	}	
	
	$data->belts = $belts;	
	$data->roster = efed_show_load_available_users($show_id);
	$data->stables = efed_show_load_stables($show_id);
	$data->type_term = taxonomy_get_term($data->type);
	
	return $data;
}

function efed_show_load_roster($show_id){		
	$rosters = array();
	$result = db_query("SELECT DISTINCT(roster_id) FROM {efed_show_roster} WHERE show_id = %d",$show_id);
	while($data = db_fetch_object($result)){ 
		$roster = efed_roster_load($data->roster_id);
		$rosters[$roster->roster_id] = $roster->name;
	}
	return $rosters;
}

function efed_show_load_available_users($show_id){		
	$items = array();
	$result = db_query("SELECT DISTINCT(efed_roster_member.cid) 
	FROM 
	efed_show_roster LEFT JOIN efed_roster_member
	ON efed_show_roster.roster_id = efed_roster_member.roster_id
	WHERE efed_show_roster.show_id = %d",
	$show_id);
	
	while($data = db_fetch_object($result)){
	
		if(!empty($data->cid)){	
			$member = efed_character_load($data->cid);
			$items[$data->cid] = $member->name;
		}
	}
	
	return $items;
}

function efed_show_load_stables($show_id){		
	$items = array();
	$result = db_query("SELECT DISTINCT(efed_stable.stable_id) 
	FROM 
	efed_show_roster LEFT JOIN efed_stable
	ON efed_show_roster.roster_id = efed_stable.roster_id
	WHERE efed_show_roster.show_id = %d",
	$show_id);
	while($data = db_fetch_object($result)){ 
		if($data){
		$stable = efed_stable_load($data->stable_id);
		$items[$stable->stable_id] = $stable->name;
		}
	}
	return $items;
}

function efed_show_store($show){	

	if($show->show_id > 0){	
		$sql = "UPDATE {efed_show} SET
			title = '%s',
			description = '%s',
			updated = %d,
			banner = '%s',
			thumbnail = '%s',
			type = %d
			WHERE 
			show_id = %d";	
		db_query($sql,
		$show->title,
		$show->description,
		time(),
		$show->banner,
		$show->thumbnail,
		$show->type,
		$show->show_id);
	}else{		
		db_query("INSERT INTO {efed_show} (
			title,
			description, 
			created, 
			updated,
			banner,
			thumbnail,
			type
			) VALUES(
			'%s',
			'%s',
			%d,
			%d,
			'%s',
			'%s',
			%d
			)",
		$show->title,
		$show->description,
		time(),
		time(),
		$show->banner,
		$show->thumbnail,
		$show->type);
		
		$sql = "SELECT show_id AS id FROM {efed_show} ORDER BY show_id DESC LIMIT 0,1";
		$result = db_query($sql);			
		$data = db_fetch_object($result);
				
		$show->show_id = $data->id;
	}
	
	efed_show_store_roster($show);
	
	$show = efed_show_load($show->show_id);
	
	$show_node = array(
		'nid'     => ($show->nid)? $show->nid : 0,
		'title'   => $show->title,
		'body' 	  => $show->description,
		'changed' => time(),
		'created' => time(),
	);
	
	$node = efed_base_create_node('efed_show',$show_node);	
	
	db_query("UPDATE {efed_show} SET nid = %d WHERE show_id = %d",$node->nid,$show->show_id);
	
	return $show;
}

function efed_show_store_roster($show){		
	$sql = "DELETE FROM {efed_show_roster} WHERE show_id = %d";			
	db_query($sql,$show->show_id);
	
	foreach($show->rosters as $roster){		
		db_query("INSERT INTO {efed_show_roster} (show_id,roster_id) VALUES(%d,%d)",$show->show_id,$roster);
	}
}

function efed_show_delete($show_id){		
	$sql = "DELETE FROM {efed_show} WHERE show_id = %d";			
	db_query($sql,$show_id);	
}

function efed_show_delete_by_nid($nid){		
	$sql = "DELETE FROM {efed_show} WHERE nid = %d";			
	db_query($sql,$nid);
}