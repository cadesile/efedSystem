<?php

efed_base();

define('EFED_RESULT_PATH','node/add/efed-result');

function efed_result_init() {
	drupal_add_css(drupal_get_path('module','efed_result').'/efed_result.css');
	drupal_add_js(drupal_get_path('module','efed_result').'/efed_result.js');
}

function efed_result_theme() {
  return array(
    'efed_result' => array(
      'arguments' => array('node' => NULL),
      'template' => 'efed_result'
    ),
    'efed_result_part' => array(
      'arguments' => array('node' => NULL),
      'template' => 'efed_result_part'
    ),
  );
}

function efed_result_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
	switch($node->type){
		case 'efed_result':
			switch ($op) {
				case 'load':
				
					$result = efed_result_load_by_nid($node->nid);				
					$node->card_id = $result->card_id;					
					$node->result_id = $result->result_id;				
					$node->parts = $result->parts;

				break;

				case 'view':
					$node->body = theme('efed_result',$node);
					
				break;
			
				case 'presave':
				
					$card = efed_card_load($node->card_id);
					$show = efed_show_load($card->show_id);
					
					$node->title = $show->title;
					$node->created = $card->card_date;
	
				break;
				
				case 'insert':
				
					efed_result_store($node);
				
				break;
				
				case 'update':
				
					efed_result_store($node);
				
				break;
				
				case 'delete':					
				
					efed_result_delete($node->result_id);
				
				break;
			}
		break;
		
		case 'efed_result_part':
			switch ($op) {
				case 'load':
				
					$part = efed_result_part_load_by_nid($node->nid);

					$node->match_id = $part->match_id;	
					$node->part_type = $part->type;
					$node->result_id = $part->result_id;
					$node->part_id = $part->part_id;
					$node->weight = $part->weight;
					$node->winner = $part->winner;
					$node->time = $part->time;
					$node->content_body = $node->body;

				break;

				case 'view':
					$node->body = theme('efed_result_part',$node);
					
				break;
			
				case 'presave':
				
					efed_result_part_store($node);
				
				break;
				
				case 'delete':					
				
					efed_result_part_delete($node->result_id);
				
				break;
			}
		break;
	}
	
}

function efed_result_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
		'info' => t('Latest Results')
	);
    return $blocks;
  }
  else if ($op == 'configure') {
	switch($delta){
		case 0:
			for($i = 5; $i<=100;$i++){
				$options[] = $i;
			}
			
			$form['efed_result_amount'] = array(
			  '#type' => 'select',
			  '#title' => t('Number of results'),
			  '#default_value' => variable_get('efed_result_amount', 5),
			  '#options' => $options,
			);
		
		break;
	}
  
    return $form;
  }
  else if ($op == 'save') {
    switch($delta) {
      case 0:
			variable_set('efed_result_amount', $edit['efed_result_amount']);
        break;
    }
  }
  else if ($op == 'view') {
    switch($delta) {
      case 0:
				$block_0 = efed_result_block_0(variable_get('efed_result_amount', 5));

				if($block_0) {
        $block = array('subject' => t('Latest Results'),
          'content' => efed_result_block_0(variable_get('efed_result_amount', 5)));
				}

        break;
    }
    return $block;
  }
}

function efed_result_block_0($amount){	
	$items = FALSE;
	
	$sql = "SELECT node.nid
			FROM efed_result
			LEFT JOIN node
			ON node.nid=efed_result.nid
			ORDER BY node.changed DESC
			LIMIT 0, ".$amount;	
			
	$result = db_query($sql);		
	
	while($data = db_fetch_object($result)){
		$node = node_load($data->nid);
		$card = efed_card_load($node->card_id);
		$items[] .= l($node->title,'node/'.$node->nid).
		'<br/><em>'.$card->location.'</em>
		<br/>'.format_date($node->created,'medium');
	}

	if($items) {
		return '<div class="jcarousel-skin-efedsystem_right_block">'.theme('item_list',$items).'</div>';
	}else {
		return FALSE;
	}
}

function efed_result_types(){
	return array(
		'match' => 'Match',
		'segment' => 'Segment',
	);
}

function efed_result_perm() {
  return array('administer efed result');
}

function efed_result_node_info() {
  
	$node_types['efed_result'] = array(
		'name' => t('E-Fed Results'),
		'base' => 'efed_result',
		'module' => 'node',
		'body_label' => 'Summary Body',
	);
	
	$node_types['efed_result_part'] = array(
		'name' => t('E-Fed Result Part'),
		'base' => 'efed_result',
		'module' => 'node',
		'title_label' => 'Segement Title',
		'body_label' => 'Segement Body',
	);
	
	return $node_types;
}

function efed_result_menu() {
	
	/*
	 * Adminstration menu callbacks
	 */  
	 
	$items[EFED_ADMIN_AREA .'/result'] = array(
    	'title' => 'Results',
    	'page callback' => 'efed_result_admin_view',
    	'weight' => 10,
    	'access arguments' => array('administer efed result'), 	
  	); 
	
	$items[EFED_ADMIN_AREA .'/result/store'] = array(
    	'title' => 'Results View',
	    'page callback'    => 'drupal_get_form',
	    'page arguments'   => array('efed_result_admin_form'),
    	'access arguments' => array('administer efed result'), 
		'type' => MENU_CALLBACK,
  	);   
	
	$items[EFED_ADMIN_AREA .'/result/delete'] = array(
    	'page callback' => 'efed_result_admin_delete',
    	'access arguments' => array('administer efed result'), 	
  	); 
	
	$items['results'] = array(
    	'title' => 'Results',
	    'page callback'    => 'efed_result_view_all',
    	'access arguments' => array('access content'), 
		'type' => MENU_CALLBACK,
  	); 
	
	return $items;	
}

function efed_result_view_all(){	
	$limit = 20;
	
	$header = array(
		array('data' => t('Result')),
		array('data' => t('Date')),
	);

	$rosters = array();
	$results = pager_query("SELECT nid FROM {efed_result}",$limit);
	while($data = db_fetch_object($results)){		
		$node = node_load($data->nid);
				
		$rows[] = array(
			array('data' => l($node->title,'node/' . $node->nid)),
			array('data' => format_date($node->created)),
		);
	}	
	
	$output .= theme('table', $header, $rows);
	$output .= theme('pager', NULL, $limit, 0);
	
	return $output;
}

function efed_result_admin_delete(){	
	$form = array();
	$result = efed_result_load(arg(4));
	
	$card = efed_card_load($result->card_id);
	$show = efed_show_load($card->show_id);
	
	//efed_result_delete($result->result_id);
	
	drupal_set_message('Results for <em>'. $show->title . ' - ' . format_date($card->card_date,'medium'). '</em> deleted.','status');
	drupal_goto(EFED_ADMIN_AREA .'/result');
	
}

function efed_result_admin_view(){	
	$limit = 10;
	
	$header = array(
		array('data' => t('Show')),
		array('data' => t('Card Date')),
		array('data' => t('Information')),
		array('data' => t('Parts')),
		array('data' => t('Options')),
	);

	$cards = array();
	$results = pager_query("SELECT result_id FROM {efed_result} ORDER BY result_id",$limit);
	
	while($data = db_fetch_object($results)){
		$result = efed_result_load($data->result_id);
		$node = node_load($result->nid);
						
		$rows[] = array(
			array('data' => t($node->title)),
			array('data' => format_date($node->created,'medium')),
			array('data' => l('Info','node/'.$node->nid.'/edit')),
			array('data' => l('Edit',EFED_ADMIN_AREA .'/result/store/'.$data->result_id)),
			array('data' => l('Delete',EFED_ADMIN_AREA .'/result/delete/'.$data->result_id)),
		);
	}	
	
	$output .= theme('table', $header, $rows);
	$output .= theme('pager', NULL, $limit, 0);
	
	$output .= l('Create Results',EFED_RESULT_PATH);
	
	return $output;
}

function efed_result_admin_form($form_state){	
	$form = array();
	
	$result = efed_result_load(arg(4));
	$node = node_load($result->nid);
	$card = efed_card_load($result->card_id);
	$show = efed_show_load($card->show_id);
	
	$form['card_id'] = array(
		'#type' => 'hidden',
		'#value' => $card->card_id,
	);
	
	$form['result_id'] = array(
		'#type' => 'hidden',
		'#value' => $result->result_id,
	);
	
	$form['info'] = array(
		'#type' => 'fieldset',
		'#title' => t('Details'),
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
	);
	
	$form['info']['info'] = array(
		'#value' => '<div><b>Results</b>: '.l($show->title.' - '.format_date($card->card_date,'medium'),'node/'.$node->nid.'/edit').'</div>',
	);
	
	if($result->parts){	
		$form['parts'] = array(
			'#type' => 'fieldset',
			'#title' => t('Parts'),
			'#collapsible' => TRUE,
			'#collapsed' => FALSE,
		);
		
		$form['parts']['info'] = array(
			'#value' => efed_result_admin_form_part($result->parts),
		);
	}
	
	$form['part'] = array(
		'#type' => 'fieldset',
		'#title' => t('Part'),
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
	);
	
	$form['part']['type'] = array(
		'#title' => t('Type'),
		'#type' => 'select',
		'#options' => efed_result_types(),
	);
	
	$match_options = efed_result_admin_form_match_options($card->matches,$result->parts);
	
	$form['part']['match_id'] = array(
		'#title' => t('Match'),
		'#type' => 'select',
		'#options' => $match_options,
	);
	
	$form['part']['title'] = array(
		'#title' => t('Segment Title'),
		'#type' => 'textfield',
	);
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Create Part',
	);
	
	return $form;
}

function efed_result_admin_form_match_options($matches,$parts){
	
	$match_options = array();
	
	foreach($matches as $match){
		$match_options[$match->match_id] = $match->match_title;
	}
	
	if($parts){	
		foreach($parts as $part){
			if($part->match_id > 0){
				unset($match_options[$part->match_id]);
			}
		}
	}
	
	if(count($match_options)==0){
		$match_options[-1] = '---- Empty ----';
	}
	
	return $match_options;
}

function efed_result_admin_form_part($parts){	
	
	$header = array(
		array('data' => t('Title')),
		array('data' => t('Weight')),
		array('data' => ''),
	);
	
	foreach($parts as $part){		
		$node = node_load($part->nid);
	
		$rows[] = array(
			array('data' => t($node->title)),
			array('data' => $part->weight),
			array('data' => l('Edit','node/'.$node->nid.'/edit')),
		);
	}	
	
	$output .= theme('table', $header, $rows);
	
	return $output;
}

function efed_result_admin_form_validate($form, &$form_state){
	$object = (object)$form_state['values'];
	
	switch($object->type){
		case 'segment':
			if(empty($object->title)){
				form_set_error('title','You have chosen to create a part type <b>segment</b>, you must include give a <em>segment title</em>.');
			}
		break;
		
		case 'match':
			if($object->match_id==-1){
				form_set_error('match_id','You have chosen to create a part type <b>match</b>, but there aren\'t any matches left create.');
			}
		break;
	}
}

function efed_result_admin_form_submit($form, &$form_state){
	$object = (object)$form_state['values'];
	
	$part_node = array();
	
	switch($object->type){
		case 'segment':
			$object->match_id = -1;
			$part_node['title'] = $object->title;
		break;
		
		case 'match':
			$match = efed_match_load($object->match_id);
			$part_node['title'] = $match->match_title;
		break;
	}
	
	$node = efed_base_create_node('efed_result_part',$part_node);	
	$object->nid = $node->nid;
	efed_result_part_store($object);
	
	drupal_set_message('Part created','status');
	drupal_goto('node/'.$object->nid.'/edit');
}

function efed_result_form_alter(&$form, $form_state, $form_id) {
	
	switch($form_id){
		case 'efed_result_node_form':	

			$cards = efed_card_load_for_select();
			
			
			if($form['nid']['#value']){
				$node = node_load($form['nid']['#value']);
				$result = efed_result_load($node->result_id);
				$card = efed_card_load($result->card_id);
				$show = efed_show_load($card->show_id);
				$desc = 'To modify the results and add <em>parts</em>, click '.l('here',EFED_ADMIN_AREA .'/result/store/'.$node->result_id).'.';
			}else{
				if(count($cards)==0){
					drupal_set_message('Can\'t create results, you must first create a '.l('card','admin/efed/card/store').' that doesn\'t have any result associated with it.','status');
					drupal_goto('admin/efed/result');
				}
				
				$desc = 'Once you have chosen the card you will be able to manage the result <em>parts</em>.';
			}
		
			$form['card'] = array(
				'#title' => 'Results',
				'#type' => 'fieldset',
				'#description' => $desc,
				'#weight' => -50,
				'#collapsible' => TRUE,
				'#collapsed' => FALSE,
			);
			
			$form['title']['#type'] = 'hidden';
			$form['title']['#value'] = 'empty';	
			
			if($form['nid']['#value']){
				$form['card']['card_id'] = array(
					'#type' => 'hidden',
					'#value' => $node->card_id,
				);
				
				$title =  '<div><b>Card:</b> '.$card->card_title.'</div>';
				
				$form['card']['title'] = array(
					'#value' =>$title,
				);
			}else{
				$form['card']['card_id'] = array(
					'#title' => t('Card'),
					'#type' => 'select',
					'#options' => $cards,
				);
			}	
			
			$form['card']['body_field'] = $form['body_field'];
			
						
			unset($form['revision_information']);
			unset($form['author']);
			unset($form['buttons']['preview']);
			unset($form['body_field']);
			unset($form['comment_settings']);
			unset($form['menu']);
			unset($form['path']);
			unset($form['attachments']);
			unset($form['title']);	
			
		break;
		
		case 'efed_result_part_node_form':
			
			if($form['nid']['#value']){
				$node = node_load($form['nid']['#value']);
				$desc = 'To modify the results and add <em>parts</em>, click '.l('here',EFED_ADMIN_AREA .'/result/store/'.$node->result_id).'.';
			
				$form['part_id'] = array(
					'#type' => 'hidden',
					'#value' => $node->part_id,
				);
				
				$form['result_id'] = array(
					'#type' => 'hidden',
					'#value' => $node->result_id,
				);
				
				$form['match_id'] = array(
					'#type' => 'hidden',
					'#value' => $node->match_id,
				);
			}
				
		
			$form['part'] = array(
				'#title' => 'Part',
				'#type' => 'fieldset',
				'#description' => $desc,
				'#weight' => -50,
				'#collapsible' => TRUE,
				'#collapsed' => FALSE,
			);	
			
			switch($node->part_type){
				case 'match':
				
					$match = efed_match_load($node->match_id);
				
					$form['roleplays'] = array(
						'#title' => 'Roleplays',
						'#type' => 'fieldset',
						'#weight' => -51,
						'#collapsible' => TRUE,
						'#collapsed' => TRUE,
					);
					
					$form['roleplays']['view'] = array(
						'#value' => efed_result_form_alter_roleplays($match),
					);
				
					$form['title']['#type'] = 'hidden';
					$form['body_field']['body']['#title'] = 'Match Result';
										
					$winner_options = array();
										
								
					switch($match->type){
						case 'singles':
						
							foreach($match->comps as $cid => $comp){
								$c = efed_character_load($cid);
								$winner_options[$c->character_id] = $c->name;
							}
						
						break;
						
						default:
						
							foreach($match->teams as $stable_id => $comp){
								$s = efed_stable_load($stable_id);
								$winner_options[$s->stable_id] = $s->name;
							}
						
						break;
					}
								
					$form['part']['winner'] = array(
						'#title' => t('Winner'),
						'#type' => 'select',
						'#weight' => 10,
						'#options' => $winner_options,
						'#default_value' => $node->winner,
					);	
				
				break;
				
				case 'segment':
					$form['title']['#title'] = 'Segment Title';
					$form['body_field']['body']['#title'] = 'Segment Body';				
				break;
			}	
			
			$form['part']['title'] = $form['title'];
			
			$form['part']['weight'] = array(
				'#title' => t('Weight'),
				'#type' => 'select',
				'#options' => efed_base_weight(),
				'#default_value' => $node->weight,
				'#description' => t('Weight determines the <em>parts</em> position within the results.'),
			);	
						
			$form['part']['body_field'] = $form['body_field'];
						
			unset($form['revision_information']);
			unset($form['author']);
			unset($form['options']);
			unset($form['buttons']['preview']);
			unset($form['body_field']);
			unset($form['comment_settings']);
			unset($form['menu']);
			unset($form['path']);
			unset($form['attachments']);
			unset($form['title']);			
		
		break;
	}
}

function efed_result_form_alter_roleplays($match){	
	
	$match->roleplays = efed_roleplay_load_by_match_id($match->match_id);
	
	$header = array(
		array('data' => t('Character')),
		array('data' => t('Title')),
		array('data' => ''),
	);
	
	foreach($match->roleplays as $rp){
		$c = efed_character_load($rp->roleplay_info->cid);
	
		$rows[] = array(
			array('data' => $c->name),
			array('data' => l($rp->title,'node/'.$rp->nid, array('attributes' => array('target' => '_blank')))),
		);
	}	
	
	$output .= theme('table', $header, $rows);
	
	return $output;
}


/*
 * 
 * BASE STORE(CREATE/UPDATE), READ & DELETE FUNCTION,  * 
 * RESULT
 * 
 */

function efed_result_load($result_id){		
	$sql = "SELECT * FROM {efed_result} WHERE result_id = %d";	
	$result = db_query($sql,$result_id);		
	$data = db_fetch_object($result);		
	$parts = (count(efed_result_load_parts($result_id)))? efed_result_load_parts($result_id) : NULL;	
	$data->parts = $parts;
	
	return $data;
}

function efed_result_load_parts($result_id){		
	$items = array();
	$results = db_query("SELECT part_id FROM {efed_result_part} WHERE result_id = %d ORDER BY weight",$result_id);
	while($data = db_fetch_object($results)) $items[] = efed_result_part_load($data->part_id);
	return $items;
}

function efed_result_load_all(){		
	$items = array();
	$sql = "SELECT result_id FROM {efed_result}";	
	$result = db_query($sql);		
	while($data = db_fetch_object($result)){
		$items[] = efed_result_load($data->result_id);
	}
	return $items;
}

function efed_result_load_by_nid($nid){		
	$sql = "SELECT result_id FROM {efed_result} WHERE nid = %d";	
	$result = db_query($sql,$nid);		
	$data = db_fetch_object($result);	
	return efed_result_load($data->result_id);
}

function efed_result_store($object){	

	if($object->result_id>0){		
		drupal_write_record('efed_result',$object,'result_id');
	}else{		
		drupal_write_record('efed_result',$object);
	}
	
	return $object;
}

function efed_result_delete($result_id){	
	
	$result = efed_result_load($result_id);
	
	foreach($result->parts as $part){
		efed_result_part_delete($part->part_id);
		node_delete($part->nid);
	}
	
	$sql = "DELETE FROM {efed_result} WHERE result_id = %d";			
	db_query($sql,$result_id);	
}

/*
 * 
 * BASE STORE(CREATE/UPDATE), READ & DELETE FUNCTION,  * 
 * RESULT PART
 * 
 */

function efed_result_part_load_by_nid($nid){		
	$sql = "SELECT part_id FROM {efed_result_part} WHERE nid = %d ORDER BY weight";	
	$result = db_query($sql,$nid);		
	$data = db_fetch_object($result);	
	return efed_result_part_load($data->part_id);
}

function efed_result_part_load($part_id){		
	$sql = "SELECT * FROM {efed_result_part} WHERE part_id = %d";	
	$result = db_query($sql,$part_id);		
	$data = db_fetch_object($result);	
	
	if($data->match_id==-1){
		$data->type = 'segment';
	}else{
		$data->type = 'match';
	}
	
	return $data;
}

function efed_result_part_store($object){	

	if($object->part_id>0){		
		drupal_write_record('efed_result_part',$object,'part_id');
	}else{		
		drupal_write_record('efed_result_part',$object);
	}
	
	return $object;
}

function efed_result_part_delete($part_id){	
	$sql = "DELETE FROM {efed_result_part} WHERE part_id = %d";			
	db_query($sql,$part_id);	
}